// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Owner {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  phoneNumber  String
  password     String
  service      String
  animalType   String
  selectedDate String
  duration     String
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?  @db.ObjectId
  createdAt    DateTime @default(now())
}

// Define the data model for the pet-sitter (seller)
model Seller {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  companyName    String
  city           String
  phoneNumber    String
  companyWebsite String?
  companySize    String
  password       String?
  email          String?
  price          String?
  experience     String?
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?  @db.ObjectId
  createdAt      DateTime @default(now())
}

// Define the data model for the user account (authentication)
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  assignedOwner  Owner[]
  assignedSeller Seller[]

  @@map("user")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

// Define the data model for user sessions
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the data model for verification tokens
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
